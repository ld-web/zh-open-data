var searchIndex = JSON.parse('{\
"zh_open_data":{"doc":"API entry for Chinese characters Open Data","t":[7,3,11,11,11,0,11,11,12,11,0,11,11,11,0,12,0,11,13,4,13,11,11,11,11,11,11,5,11,11,11,11,11,12,12,8,8,0,0,11,11,11,11,0,10,0,0,5,17,3,11,11,11,11,5,11,11,11,11,11,11,17,3,11,11,11,11,5,11,11,11,11,11,11,17,3,11,11,11,11,5,11,11,11,11,11,11,17,3,11,11,11,5,11,5,11,11,11,11,11,11,11,3,6,6,6,3,6,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,12,11,11,11,11,11,11,11,11,5,5],"n":["DATA","OpenData","borrow","borrow_mut","build","filters","from","get_char_infos","global_map","into","loader","try_from","try_into","type_id","types","unicode_to_cns","utils","vzip","Found","LookupResult","NotFound","borrow","borrow_mut","deserialize","fmt","from","into","lookup","serialize","try_from","try_into","type_id","vzip","0","0","Loader","PathResolver","char_info","components","get_files_paths","get_map","load_into","load_into_map","phonetic","process_line","stroke","unicode_to_cns","get_global_map","CNS_TO_COMPONENT_FILES","ComponentsLoader","borrow","borrow_mut","from","into","load_into","parse_line","process_line","try_from","try_into","type_id","vzip","CNS_TO_PHONETIC_FILES","PhoneticLoader","borrow","borrow_mut","from","into","load_into","parse_line","process_line","try_from","try_into","type_id","vzip","CNS_TO_STROKE_COUNT_FILES","StrokeLoader","borrow","borrow_mut","from","into","load_into","parse_line","process_line","try_from","try_into","type_id","vzip","CNS_TO_UNICODE_FILES","UnicodeToCnsLoader","borrow","borrow_mut","from","get_single_map","into","load_into","parse_line","process_line","process_line","try_from","try_into","type_id","vzip","CharInfo","CnsCode","Components","Phonetic","StrokeInfo","UnicodeHexVal","borrow","borrow","borrow_mut","borrow_mut","character","clone","clone","clone_into","clone_into","cns_code","components","default","deserialize","deserialize","fmt","fmt","from","from","into","into","new","phonetic","serialize","serialize","strokes","to_owned","to_owned","total","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","get_char","get_hex"],"q":["zh_open_data","","","","","","","","","","","","","","","","","","zh_open_data::filters","","","","","","","","","","","","","","","zh_open_data::filters::LookupResult","","zh_open_data::loader","","","","","","","","","","","","zh_open_data::loader::char_info","zh_open_data::loader::components","","","","","","","","","","","","","zh_open_data::loader::phonetic","","","","","","","","","","","","","zh_open_data::loader::stroke","","","","","","","","","","","","","zh_open_data::loader::unicode_to_cns","","","","","","","","","","","","","","","zh_open_data::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zh_open_data::utils",""],"d":["Shared Open Data","Main data structures","","","Build all the hashmaps based on provided loading directory","API endpoints","","Get a single character infos","","","Generic trait for file loading","","","","Custom types and alias","","General/Utility functions","","If found, will contain the character informations","Possible lookup results","If not found, will contain a message","","","","","","","Lookup a character or a series of characters into Open …","","","","","","","","","","Character informations loader","Implementation for CNS code to components file(s)","Given an array of filenames (only filenames, not full …","Get a single map with given paths loaded and mapped into it","Load a given file into a given map","Load and map given paths into an existing map","Implementation for CNS code to phonetic file(s) (Zhuyin / …","Given a map with concrete types, and a line, do something …","Implementation for CNS code to stroke info file(s)","Implementation for CNS code to unicode file(s)","Loads the global map containing all characters …","","","","","","","Load and map all components into an existing HashMap","Parse a given line a return a tuple containing extracted …","Process a line for a HashMap&lt;CnsCode, CharInfo&gt;","","","","","","","","","","","Load and map all phonetics into an existing HashMap","Parse a given line a return a tuple containing extracted …","","","","","","","","","","","","Load and map all stroke counts into an existing HashMap","Parse a given line a return a tuple containing extracted …","","","","","","","","","","","This function will give a HashMap with unicode hex value …","","Load and map all unicode values into an existing HashMap","Parse a given line a return a tuple containing extracted …","For HashMap&lt;CnsCode, CharInfo&gt;, build a default CharInfo …","For a HashMap&lt;UnicodeHexVal, CnsCode&gt;, just put the …","","","","","All character informations","CNS (Chinese National Standard) Code","Possible components combinations","Possible phonetics, in Zhuyin (注音)","Stroke informations.","Unicode hexadecimal representation","","","","","","","","","","","","","","","","","","","","","Default constructor for a given char &amp; CNS Code","","","","","","","","","","","","","","","","Returns the character for a given unicode hexadecimal value","Returns the unicode hex value for a given character, as a …"],"i":[0,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,0,1,2,0,2,2,2,2,2,2,2,0,2,2,2,2,2,3,4,0,0,0,0,5,6,6,6,0,6,0,0,0,0,0,7,7,7,7,0,7,7,7,7,7,7,0,0,8,8,8,8,0,8,8,8,8,8,8,0,0,9,9,9,9,0,9,9,9,9,9,9,0,0,10,10,10,0,10,0,10,10,10,10,10,10,10,0,0,0,0,0,0,11,12,11,12,12,11,12,11,12,12,12,11,11,12,11,12,11,12,11,12,12,12,11,12,12,11,12,11,11,12,11,12,11,12,11,12,0,0],"f":[null,null,[[]],[[]],[[["str",15]],["opendata",3]],null,[[]],[[["char",15]],[["option",4,["charinfo"]],["charinfo",3]]],null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],null,null,null,[[]],[[]],[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[["str",15]],[["string",3],["vec",3,["string"]]]],[[],[["result",6,["hashmap"]],["hashmap",3]]],[[["str",15],["hashmap",3]],["result",6]],[[["hashmap",3]]],null,[[["string",3],["hashmap",3]]],null,null,[[["str",15]],[["result",6,["hashmap"]],["hashmap",3,["string","charinfo"]]]],null,null,[[]],[[]],[[]],[[]],[[["hashmap",3],["str",15]],["result",6]],[[["string",3]],["option",4]],[[["hashmap",3],["string",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[]],[[]],[[["hashmap",3],["str",15]],["result",6]],[[["string",3]],["option",4]],[[["hashmap",3],["string",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[]],[[]],[[["hashmap",3],["str",15]],["result",6]],[[["string",3]],["option",4]],[[["hashmap",3],["string",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[]],[[["str",15]],[["result",6,["hashmap"]],["hashmap",3,["string","string"]]]],[[]],[[["hashmap",3],["str",15]],["result",6]],[[["string",3]],["option",4]],[[["hashmap",3],["string",3]]],[[["string",3],["hashmap",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[],["strokeinfo",3]],[[],["charinfo",3]],[[]],[[]],null,null,[[],["strokeinfo",3]],[[],["result",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["string",3],["char",15]]],null,[[],["result",4]],[[],["result",4]],null,[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["string",3]],["char",15]],[[["char",15]],["string",3]]],"p":[[3,"OpenData"],[4,"LookupResult"],[13,"Found"],[13,"NotFound"],[8,"PathResolver"],[8,"Loader"],[3,"ComponentsLoader"],[3,"PhoneticLoader"],[3,"StrokeLoader"],[3,"UnicodeToCnsLoader"],[3,"StrokeInfo"],[3,"CharInfo"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};